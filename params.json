{"name":"Adus","tagline":"Android Debug Utility Suite","body":"# Motivation\r\n\r\nAfter having written my [post](http://blog.dornea.nu/2014/08/21/howto-debug-android-apks-with-eclipse-and-ddms/) on debugging with Eclipse and DDMS, I wanted to somehow automate those steps. And this is how\r\nADUS got born. \r\n\r\nIts basically only a BASH script ment to glue things together and make my life easier. Feel free to adapt it to your needs. Pull requests are highly welcome.\r\n\r\n# Requirements\r\n\r\n* *adus.sh*\r\n  + bash :)\r\n* *apktool*\r\n  + Java >= 1.7.x ([link](https://code.google.com/p/android-apktool/wiki/BuildApktool#Requirements))\r\n  + aapt (Android Asset Packaging Tool) in $PATH (usually found in android-sdk/build-tools/*)\r\n* *signapk*\r\n  + no specific requirements\r\n* *dex2jar*\r\n  + no specific requirements\r\n\r\n\r\n# Installation\r\n\r\nYou can download/clone the package wherever you want and call `./adus.sh` from there. Since the GIT repo is quite big (ca. 28M) you should download it only once and copy it to `/opt/adus/`. Make sure you adapt your `$PATH` to point to `/opt/adus/adus.sh`. Afterwards you should be able to call `adus.sh` system-wide. \r\n\r\n# Run \r\n\r\nADUS is very easy to use. Have a look at the available options:\r\n\r\n~~~ shell\r\n\r\n            __   ____  _  _  ____  \r\n           / _\\ (    \\/ )( \\/ ___) \r\n          /    \\ ) D () \\/ (\\___ \\ \r\n          \\_/\\_/(____/\\____/(____/ \r\n\r\n      [A]ndroid [D]ebug [U]tility [S]uite\r\n    \r\nUsage: ./adus.sh <options>\r\nAvailable options:\r\n -h                      Print this message\r\n -b <app_path>           Build new APK from source directory\r\n -d <app_path>           Dump APK to ./source\r\n -s <app_path>           Sign APK using test certificate\r\n -u <app_path>           Unpack APK to ./unpacked\r\n -x <dex_path>           Convert DEX to JAR\r\n -q                      Be quite. Deactivate verbosity.\r\n -0 <app_path>           Dump (-d) and unpack (-u) APK\r\n -1 <app_path>           Build (-b) and sign (-s)\r\n\r\n\r\n~~~\r\n\r\n\r\n# Tested on ...\r\n\r\n* Linux \r\n* Windows 7\r\n  + Using [Git Bash](http://msysgit.github.io/)\r\n\r\n>Can anyone confirm ADUS running on *BSD?\r\n\r\n# Examples\r\n\r\n### Unpack and dump APK\r\n\r\nGiven an APK ADUS will dump the contents to `./source` using `apktool`. Afterwards it will unpack the APK (=ZIP file) to `./unpacked` using `unzip`. The `-0` command is actually a combo of `-d` and `-u`.\r\n\r\n~~~ shell\r\n# ./adus.sh -0 FakeBanker.apk \r\n[2014-09-04 20:48:35] INFO: Dumping FakeBanker.apk to ./source ... \r\nI: Using Apktool 2.0.0-dirty on FakeBanker.apk\r\nI: Loading resource table...\r\nI: Loading resource table...\r\nI: Decoding AndroidManifest.xml with resources...\r\nI: Loading resource table from file: /home/victor/apktool/framework/1.apk\r\nI: Regular manifest package...\r\nI: Decoding file-resources...\r\nI: Decoding values */* XMLs...\r\nI: Baksmaling classes.dex...\r\nI: Copying assets and libs...\r\nI: Copying unknown files...\r\nI: Copying original files...\r\n[2014-09-04 20:48:39] INFO: Success!\r\n[2014-09-04 20:48:39] INFO: Unpacking FakeBanker.apk to ./unpacked ... \r\nArchive:  FakeBanker.apk\r\nsigned by SignApk\r\n  inflating: ./unpacked/META-INF/MANIFEST.MF  \r\n  inflating: ./unpacked/META-INF/CERT.SF  \r\n  inflating: ./unpacked/META-INF/CERT.RSA  \r\n  inflating: ./unpacked/AndroidManifest.xml  \r\n  inflating: ./unpacked/classes.dex  \r\n extracting: ./unpacked/res/drawable-hdpi/ic_launcher1.png  \r\n extracting: ./unpacked/res/drawable-hdpi/logo.png  \r\n extracting: ./unpacked/res/drawable-ldpi/ic_launcher1.png  \r\n extracting: ./unpacked/res/drawable-mdpi/ic_launcher1.png  \r\n extracting: ./unpacked/res/drawable-xhdpi/ic_launcher1.png  \r\n  inflating: ./unpacked/res/layout/actup.xml  \r\n  inflating: ./unpacked/res/layout/main.xml  \r\n  inflating: ./unpacked/res/layout/main2.xml  \r\n  inflating: ./unpacked/res/menu/main.xml  \r\n extracting: ./unpacked/res/raw/blfs.key  \r\n  inflating: ./unpacked/res/raw/config.cfg  \r\n  inflating: ./unpacked/resources.arsc  \r\n[2014-09-04 20:48:39] INFO: Success!\r\n~~~\r\n\r\n\r\n### Build and sign new APK\r\n\r\nADUS will build a new APK from `./source` and sign it using `signapk`. The `-1` command consists of `-b` and `-s`.\r\n\r\n~~~ shell\r\n./adus.sh -1 FakeBanker-NEW.apk\r\n[2014-09-04 20:52:01] INFO: Building APK from ./source ... \r\n\r\nI: Using Apktool 2.0.0-dirty on source\r\nI: Checking whether sources has changed...\r\nI: Smaling smali folder into classes.dex...\r\nI: Checking whether resources has changed...\r\nI: Building resources...\r\nWarning: AndroidManifest.xml already defines debuggable (in http://schemas.android.com/apk/res/android); using existing value in manifest.\r\nI: Building apk file...\r\n[2014-09-04 20:52:06] INFO: Success! FakeBanker-NEW.apk is your new APK.\r\n[2014-09-04 20:52:06] INFO: Signing FakeBanker-NEW.apk ...\r\n[2014-09-04 20:52:06] INFO: Success! FakeBanker-NEW.SIGNED.apk is your signed APK.\r\n~~~\r\n\r\n\r\n### Convert dex to jar\r\n\r\nUsing dex2jar you'll be able to convert the `classes.dex` into a `jar` file.\r\n\r\n~~~ shell\r\n./adus.sh -x unpacked/classes.dex\r\n[2014-09-04 20:53:14] INFO: Converting unpacked/classes.dex to JAR ... \r\ndex2jar unpacked/classes.dex -> ./unpacked/classes-dex2jar.jar\r\n[2014-09-04 20:53:17] INFO: Success! Converted file is at ./unpacked/classes-dex2jar.jar\r\n~~~\r\n\r\n\r\n# License\r\n\r\nReleased under the MIT License. Check out `License.md`.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}